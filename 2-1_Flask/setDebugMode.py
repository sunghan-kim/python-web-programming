# Flask 인스턴스를 담고 있는 객체 변수(인스턴스)로서 할 수 있는 작업들
# 6. 디버그 모드 설정

# 보통 프로그램에서 발생하는 에러는 다음 2가지로 구분된다.
#  - 컴파일 에러
#    - 프로그램이 실행이 되지 않은 경우
#    - 웹 애플리케이션 개발 도중에 발생할 수 있지만 사용 중에는 발생하지 않는다.
#  - 런타임 에러
#    - 프로그램 사용 중에 발생
#    - 파이썬에서는 런타임 에러의 일부를 "예외"라는 쳬계로 두고 예외가 발생한 경우 프로그래머가 특정 목적에 맞게
#      애플리케이션에 처리 결과를 응답해줄 수 있다.
#    - 그러나 예외로 분류되지 않는 에러는 웹 애플리케이션의 운용 상태를 강제로 끝내게 만들 수도 있다.

# Flask에서는 웹 애플리케이션에서 오류가 발생했을 때 오류가 발생한 환경(런타입 컨텍스트)과 함께 어떤 상황에서 오류가 발생했는 지를
# 디버깅할 수 있는 디버깅 콘솔을 지원한다.
# 웹 애플리케이션의 개발 과정에서 이 기능을 활용하려면 Flask 객체의 debug 속성값을 True로 넘겨주면 디버깅 기능이 활성화된다.

# 웹 애플리케이션에 디버깅 모드 활성화
from flask import Flask

app = Flask(__name__)
# 디버깅 모드 활성화 방법 1
app.debug = True

# 디버깅 모드 활성화 방법 2
app.config.update(DEBUG=True)


# 프로그램의 디버깅이 모두 끝나면 웹 애플리케이션에서 디버깅 모드를 끄는 것이 좋다.
#  - 디버깅 콘솔에 출력되는 정보를 이용할 경우 외부 공격자에게 웹 애플리케이션의 취약점을 노출할 수 있기 때문
# 디버깅 모드를 끄면 웹 애플리케이션에서 발생하는 모든 에러는 웹 브라우저에 출력되지 않고 웹 서버의 로그로 출력된다.

# 디버깅 콘솔은 Ajax 애플리케이션이나 REST API 애플리케이션 개발 시에는 사용할 수 없다.
# 화면 전환이 명시적으로 이뤄지는 웹 애플리케이션에서는 웹 페이지로 출력되는 디버깅 콘솔을 이용해 프로그램 소스 코드를 수정하지
# 않고 오류를 확인해볼 수 있다.
